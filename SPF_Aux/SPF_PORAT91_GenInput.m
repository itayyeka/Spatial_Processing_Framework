function [InputSig_CellArr_Noised] = SPF_PORAT91_GenInput(EnvironmentCfg,ScenarioCfg)
c=ScenarioCfg.PropagationSpeed;
fCarrier=ScenarioCfg.fCarrier;
Lambda=c/fCarrier;
k=2*pi/Lambda;
f_SumSources=@(Sensor,Sources,ScnCfg) ...
    reshape(... 5. reshape the output to be a row vector. Each element is the input to the relevant sensor
    sum(...
    cell2mat(... 3. create matrix to allow summation
    reshape(... 2. reshape the cell array as column of cells with one row each (each element in the row is the contribution of a source to the relevant sensor)
    cellfun( ...
    @(Source) f_SenseSource(Sensor,Source,k,ScnCfg), ... 1. get input from each source to the relevant sensor
    Sources, ...
    'UniformOutput',false), ...
    [],1) ...
    ),1 ... 4. sum the columns of the matrix
    ), ...
    1,[]);
InputSig_CellArr=cellfun(...
    @(Sensor) f_SumSources(Sensor,EnvironmentCfg.SourcesCfg,ScenarioCfg),...
    EnvironmentCfg.SensorsCfg, ...
    'UniformOutput',false);
InputSig_CellArr_Noised=cellfun(...
    @(Signal) Signal+ScenarioCfg.Noise.Sigma*randn(size(Signal)), ...
    InputSig_CellArr, ...
    'UniformOutput',false);
if false
    %% DEBUG
    figure;
    subplot(2,1,1)
    plot(real(cell2mat(InputSig_CellArr)));
    subplot(2,1,2)
    plot(real(cell2mat(InputSig_CellArr_Noised)));
end
end
function f_Signal=f_SenseSource(Sensor,Source,k,ScnCfg)
r_VEC=Sensor.Position(:)-Source.Position(:);
range=sqrt(sum(r_VEC.^2));
f_Signal_PreProcess=reshape(...
    Source.Signal(1:ScnCfg.nSnapshots)*exp(-1i*range*k)/range ...
    ,1,[]);
f_Signal=filter(...
    Sensor.Filter.Den,...
    Sensor.Filter.Num,...
    f_Signal_PreProcess ...
    );
end
