function [Response] = SPF_CalcResponse(EnvironmentCfg,ScenarioCfg)
AngleVec=0:ScenarioCfg.DOA.res:(360-0.5*ScenarioCfg.DOA.res);
TmpEnvCfg=EnvironmentCfg;
SensorsDistances=cellfun(...
    @(X) sqrt(sum(X.Position.^2)), ...
    TmpEnvCfg.SensorsCfg);
maxSensorDistance=max(SensorsDistances);
ExampleSourceDistance=max(10,10*maxSensorDistance);
ResponseMAT=zeros(numel(EnvironmentCfg.SensorsCfg),numel(AngleVec));
c=ScenarioCfg.PropagationSpeed;
fCarrier=ScenarioCfg.fCarrier;
Lambda=c/fCarrier;
k=2*pi/Lambda;
Range_VEC_OLD=zeros(1,numel(EnvironmentCfg.SensorsCfg));
for AngleID=1:numel(AngleVec)
    CurAngle_DEG=AngleVec(AngleID);
    Source_POS=...
        
        [...
        ExampleSourceDistance*cos(f_convert_deg_to_rad(CurAngle_DEG)) ...
        ExampleSourceDistance*sin(f_convert_deg_to_rad(CurAngle_DEG)) ...
        0 ...
        ];
    Range_VEC=cellfun(...
        @(Sensor) sum((Sensor.Position(:)-Source_POS(:)).^2) ...
        ,EnvironmentCfg.SensorsCfg); 
    Ranges_DIFF=Range_VEC-Range_VEC_OLD;
    Range_VEC_OLD=Range_VEC;
    Phase_VEC=k*Range_VEC;
    MaxPhaseDiff_VEC(AngleID)=(max(Phase_VEC)-min(Phase_VEC))/pi;
    Response_VEC=exp(1i*Phase_VEC); 
    ResponseMAT(:,AngleID)=Response_VEC(:)/norm(Response_VEC(:));
end
% assert(max(MaxPhaseDiff_VEC)<0.5,'Array too big');
if false
    %% DEBUG
    figure;plot(MaxPhaseDiff_VEC);
end
Response.MAT=ResponseMAT;
Response.SensorCfg=EnvironmentCfg.SensorsCfg;
end