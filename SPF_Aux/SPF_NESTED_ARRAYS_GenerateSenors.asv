function [newElements,Nd_Tilda,U1,Nd,Ns,P,N1_s,N2_s,lambda1,lambda2,DOF,DenseArrayGenerator,SparseArrayGenerator] = SPF_NESTED_ARRAYS_GenerateSenors(ElementCfg)
K=ElementCfg.ShapeCfg.nElements;

[...
    N1_s,...
    N2_s,...
    lambda1,...
    lambda2,...
    K1,...
    K2,...
    DOF, ...
    skewDELTA ...
    ] = ...
    SPF_NESTED_ARRAYS_ResolveArrayParam(...
    K ...
    );
ULAs_AngleVEC_DEG=ElementCfg.ShapeCfg.ULAs_AngleVEC_DEG;
ULAs_AngleVEC_RAD=f_convert_deg_to_rad(ULAs_AngleVEC_DEG);
DenseElementsSpacing=ElementCfg.ShapeCfg.DenseElementsSpacing;
SparseElementsSpacing=ElementCfg.ShapeCfg.SparseElementsSpacing;
ULAs_Coordinates_COMPLEX=...
    exp(1i*ULAs_AngleVEC_RAD);
VectorsMAT=...    
    [ ...
    real(ULAs_Coordinates_COMPLEX)...
    ; ...
    imag(ULAs_Coordinates_COMPLEX)...
    ] ...
    * ...
    [DenseElementsSpacing 0 ; 0 SparseElementsSpacing];
SparseVector=VectorsMAT(:,2);
DenseVector=VectorsMAT(:,1);
U1=[1 1 ; 0 1]; % Chose arbitrary unimodular matrix
U2=[1 0 ; 0 1]; % Chose arbitrary unimodular matrix
P=U1*diag([lambda1 lambda2])*U2;
Nd_SYM=sym('Nd_%d%d',[2 2]);
Ns_SYM=sym('Ns_%d%d',[2 2]);
NsInvU2_SYM=Ns_SYM/U2; % b/A == b*Inv(A)
NdU1_SYM=Nd_SYM*U1;
if N1_s==0
    eqn1=(NsInvU2_SYM(:,2)==SparseVector);
elseif N2_s==1
    eqn1=(NsInvU2_SYM(:,1)==SparseVector);
else
    assert('something is wrong');
end
if lambda1==1
    eqn2=(NdU1_SYM(:,2)==DenseVector);
elseif lambda2==1
    eqn2=(NdU1_SYM(:,1)==DenseVector);
else
    assert('something is wrong')
end
eqn3=(Ns_SYM==P*Nd_SYM);
eqns_SOL=solve(eqn1,eqn2,eqn3);
Nd=[ ...
    eqns_SOL.Nd_11 eqns_SOL.Nd_12 ...
    ; ...
    eqns_SOL.Nd_21 eqns_SOL.Nd_22 ...
    ];
Ns=eval([ ...
    eqns_SOL.Ns_11 eqns_SOL.Ns_12 ...
    ; ...
    eqns_SOL.Ns_21 eqns_SOL.Ns_22 ...
    ];
Nd_Tilda=Nd*U1;
ArrayPositions=[];
%% Sparse array elements
%{
Ns*Inv(U2)*[m ; n]
-N1_s   <= m <= N1_s
0       <= n <= N2_s-1
%}
SparseArrayGenerator=Ns/U2; % b/A == b*Inv(A)
m_MIN=-N1_s;
m_MAX=N1_s;
n_MIN=0;
n_MAX=N2_s-1;
mVEC=m_MIN:m_MAX;
nVEC=n_MIN:n_MAX;
for m=mVEC
    for n=nVEC
        POS=SparseArrayGenerator*[m ; n];
        if ~isequal(POS,zeros(size(POS)))
            %{
            Here we create the n1d_Tilda which excludes the 0 element
            %}
            ArrayPositions=[ArrayPositions POS];
        end
    end
end
SparseArrayGenerator_ORIG=SparseArrayGenerator;
if numel(mVEC)==1
    SparseArrayGenerator=SparseArrayGenerator(:,2);
elseif numel(nVEC)==1
    SparseArrayGenerator=SparseArrayGenerator(:,1);
else
    assert('This is not a ULA');
end
Sparse_mVEC=mVEC;
Sparse_nVEC=nVEC;
%% Dense array elemetns
%{
According to configuration II:
Nd*U1*[m ; n];
%}
DenseArrayGenerator=Nd*U1;
m_MIN=-(lambda1-1)/2;
m_MAX=(lambda1-1)/2;
n_MIN=-lambda2+1;
n_MAX=0;
mVEC=m_MIN:m_MAX;
nVEC=n_MIN:n_MAX;
for m=mVEC
    for n=nVEC
        POS=DenseArrayGenerator*[m ; n];
        %{
        Here we create the n2d_Tilda which includes the 0 element
        %}
        ArrayPositions=[ArrayPositions POS];
    end
end
DenseArrayGenerator_ORIG=DenseArrayGenerator;
if numel(mVEC)==1
    DenseArrayGenerator=DenseArrayGenerator(:,2);
elseif numel(nVEC)==1
    DenseArrayGenerator=DenseArrayGenerator(:,1);
else
    assert('This is not a ULA');
end
newElements_MAT=[ArrayPositions;zeros(1,size(ArrayPositions,2))];
newElements=mat2cell(newElements_MAT,3,ones(1,size(ArrayPositions,2)));
end