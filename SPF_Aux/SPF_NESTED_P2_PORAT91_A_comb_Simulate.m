function [Results] = SPF_NESTED_P2_PORAT91_A_comb_Simulate(EnvironmentCfg,ScenarioCfg)
SPF_disp('strating "NESTED_P2_PORAT91_A_comb_Simulate"');
%% Input to the physical array
if true
    %{
    Random determinations:
    
    1.We generate a single snapshot for the virtual array by processing a
    frame which is randomly fixed to be the same size of the regular
    time-frame.
    
    2.The system will accumulate frames with maximal overlap of 1 - also
    randomly determined.
    
    %}
    nFrames=ScenarioCfg.nFrames;
    FrameSize=ScenarioCfg.FrameSize;
    Overlap=ScenarioCfg.Overlap;
    SmpDiff_BetweenFrames=FrameSize-Overlap;
    %{
    According to the inserted parameters, there may be a few extra input
    values that will not be used...its OK.
    %} 
    ScenarioCfg.nSnapshots=...
        (nFrames-1)*SmpDiff_BetweenFrames+FrameSize ...
        ;
end
EnvironmentCfg.SourcesCfg=...
    SPF_AssignSignalsToSources(...
    EnvironmentCfg.SourcesCfg,...
    ScenarioCfg ...
    );
[InputSig_CellArr_Noised] = SPF_GenInput(EnvironmentCfg,ScenarioCfg);
%% Extract input to the coArray
z1_Snapshots=[];
ScenarioCfg_SingleFrame=ScenarioCfg;
ScenarioCfg_SingleFrame.nSnapshots=FrameSize;
SPF_disp(['strating to emulate inputs : ' num2str(nFrames) ' frames']);
for frameID=1:nFrames
    SPF_disp(['FRAME# ' num2str(frameID) '/' num2str(nFrames)]);
    start_SnapshotID=(frameID-1)*SmpDiff_BetweenFrames+1;
    end_SnapshotID=start_SnapshotID+FrameSize-1;
    InputSig_CellArr_Noised_SingleFrame=cellfun(...
        @(SensorInput) reshape(SensorInput(start_SnapshotID:end_SnapshotID),1,[]), ...
        InputSig_CellArr_Noised, ...
        'UniformOutput',false ...
        );
    [coArray_POS_VEC,z1]=SPF_NESTED_P2_get_CoArray_InputSig(EnvironmentCfg,ScenarioCfg_SingleFrame,InputSig_CellArr_Noised_SingleFrame);
    z1_Snapshots=[z1_Snapshots z1];
end
%% coArrayCfg
Viratual_EnvironmentCfg=EnvironmentCfg;
Viratual_EnvironmentCfg.SensorsCfg={};
for coArray_SensorID=1:size(coArray_POS_VEC,2)
    Viratual_EnvironmentCfg.SensorsCfg{end+1}.Position=...
        coArray_POS_VEC(:,coArray_SensorID);
end
%% PORAT91
Results=[];
persistent Response;
CalcResponseFlg=1;
% if ~isempty(Response)
%     CalcResponseFlg=~isequal(Response.SensorCfg,EnvironmentCfg.SensorsCfg);
% end
if CalcResponseFlg
    Response=SPF_CalcResponse(Viratual_EnvironmentCfg,ScenarioCfg);
end
SensorsInput_CELL=mat2cell(z1_Snapshots,ones(size(z1_Snapshots,1),1),size(z1_Snapshots,2));
SensorsInput_CELL=reshape(SensorsInput_CELL,1,[]);
% assert(false,[...
%     'This is the last line that was developped. currently, '...
%     'continuing exactly as in the PORAT91 paper fails.' ...
%     'Possible different parameters of the nFrames,FrameSize etc may improve the results'...
%     ]);
Mu4_MAT_t=zeros(...
    numel(SensorsInput_CELL)^2,...
    numel(SensorsInput_CELL)^2,...
    ScenarioCfg.nFrames ...
    );
Mu2_k1l1_t=zeros(...
    numel(SensorsInput_CELL)^2,...
    numel(SensorsInput_CELL)^2,...
    ScenarioCfg.nFrames ...
    );
Mu2_k2l2_t=zeros(...
    numel(SensorsInput_CELL)^2,...
    numel(SensorsInput_CELL)^2,...
    ScenarioCfg.nFrames ...
    );
Mu2_k1l2_t=zeros(...
    numel(SensorsInput_CELL)^2,...
    numel(SensorsInput_CELL)^2,...
    ScenarioCfg.nFrames ...
    );
Mu2_k2l1_t=zeros(...
    numel(SensorsInput_CELL)^2,...
    numel(SensorsInput_CELL)^2,...
    ScenarioCfg.nFrames ...
    );
OnesVec=ones([numel(SensorsInput_CELL),1]);
for FrameID=1:nFrames
    if numel(Viratual_EnvironmentCfg.SourcesCfg)
        ArrInput=...
            reshape(...
            cellfun(...
            @(SensorInput) SensorInput(FrameID), ...
            SensorsInput_CELL) ...
            ,[],1);
    else
        ArrInput=zeros(numel(Viratual_EnvironmentCfg.SensorsCfg),1);
    end
    y=ArrInput;
    Mu4_MAT_t(:,:,FrameID)=(kron(y,conj(y)))*conj(transpose(kron(y,conj(y))));
    Mu2_k1l1_t(:,:,FrameID)=(kron(y,OnesVec))*conj(transpose(kron(y,OnesVec)));
    Mu2_k2l2_t(:,:,FrameID)=(kron(OnesVec,conj(y)))*conj(transpose(kron(OnesVec,conj(y))));
    Mu2_k1l2_t(:,:,FrameID)=(kron(y,OnesVec))*conj(transpose(kron(OnesVec,conj(y))));
    Mu2_k2l1_t(:,:,FrameID)=(kron(OnesVec,conj(y)))*conj(transpose(kron(y,OnesVec)));
end
Comulant4= ...
    mean(Mu4_MAT_t,3) ...
    -mean(Mu2_k1l1_t,3).*mean(Mu2_k2l2_t,3) ...
    -mean(Mu2_k1l2_t,3).*mean(Mu2_k2l1_t,3);
C=Comulant4;
[U,Sigma,V]=svd(C);
Sigma_EigenVal=log(diag(Sigma));
U2=U(:,(numel(Viratual_EnvironmentCfg.SourcesCfg)+1):end);
d=zeros(size(Response.MAT,2),1);
for AngleID=1:size(Response.MAT,2)
    a=Response.MAT(:,AngleID);
    d(AngleID)=sum(abs(conj(transpose(kron(a,conj(a))))*U2).^2);
end
PhiRes=360/size(Response.MAT,2);
PhiVEC=0:PhiRes:(360-PhiRes/2);
figure;plot(PhiVEC(:),reshape(1./d(1:length(PhiVEC)),[],1));
end