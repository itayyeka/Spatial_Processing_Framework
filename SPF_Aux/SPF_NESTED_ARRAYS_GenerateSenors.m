function [newElements] = SPF_NESTED_ARRAYS_GenerateSenors(ElementCfg)
K=ElementCfg.ShapeCfg.nElements;

[...
    N1_s,...
    N2_s,...
    lambda1,...
    lambda2,...
    K1,...
    K2,...
    DOF ...
    ] = ...
    SPF_NESTED_ARRAYS_ResolveArrayParam(...
    K ...
    );
ULAs_AngleVEC_DEG=ElementCfg.ShapeCfg.ULAs_AngleVEC_DEG;
ULAs_AngleVEC_RAD=f_convert_deg_to_rad(ULAs_AngleVEC_DEG);
DenseElementsSpacing=ElementCfg.ShapeCfg.DenseElementsSpacing;
SparseElementsSpacing=ElementCfg.ShapeCfg.SparseElementsSpacing;
ULAs_Coordinates_COMPLEX=...
    exp(1i*ULAs_AngleVEC_RAD);
Nd_Tilda=[ ...
    real(ULAs_Coordinates_COMPLEX)...
    ; ...
    imag(ULAs_Coordinates_COMPLEX)...
    ] ...
    * ...
    [DenseElementsSpacing 0 ; 0 SparseElementsSpacing];
U1=[1 1 ; 0 1]; % Chose arbitrary unimodular matrix
Nd_Sym=sym('Nd_%d%d',[2 2]);
Nd_Sym=solve(Nd_Sym*U1==Nd_Tilda);
Nd=eval(...
    [ ...
    Nd_Sym.Nd_11 Nd_Sym.Nd_12 ...
    ; ...
    Nd_Sym.Nd_21 Nd_Sym.Nd_22 ...
    ] ...
    );
if mod(K1,2)==0
    mVEC_min=1;
    mVEC_max=K1;
elseif mod(K1,2)==1
    mVEC_min=-(K1-1)/2;
    mVEC_max=(K1-1)/2;
end
if mod(K2,2)==0
    nVEC_min=1;
    nVEC_max=K2;
elseif mod(K2,2)==1
    nVEC_min=-(K2-1)/2;
    nVEC_max=(K2-1)/2;
end
mVEC=mVEC_min:mVEC_max;
nVEC=nVEC_min:nVEC_max;
ArrayPositions= ...
    Nd_Tilda*...
    [ ...
    mVEC zeros(size(nVEC))...
    ;...
    zeros(size(mVEC)) nVEC...
    ];
newElements_MAT=[ArrayPositions;zeros(1,size(ArrayPositions,2))];
newElements=mat2cell(newElements_MAT,3,ones(1,size(ArrayPositions,2)));
end

